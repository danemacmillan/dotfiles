#!/usr/bin/env bash

##
# First install of dotfiles.
#
# This is a script to install Dane MacMillan's dotfiles repo on a brand new
# machine with nothing available.
#
# Note about passing arguments to install script:
# - http://stackoverflow.com/a/25563308
#
# Install (with and without SSH keys):
#   curl -sL https://raw.githubusercontent.com/danemacmillan/dotfiles/master/install | bash -
#   curl -sL https://raw.githubusercontent.com/danemacmillan/dotfiles/master/install | bash -s -- nossh
#
# @author Dane MacMillan <work@danemacmillan.com>
# @link https://github.com/danemacmillan/dotfiles
# @license MIT
#
# @TODO Make OS detection more thorough. At the moment, "nix" essentially
# means "not MacOS and definitely CentOS." Obviously there is more to "nix."
# @TODO Make this more robust.
## Update install script and readme.
## http://stackoverflow.com/questions/4642915/passing-parameters-to-bash-when-executing-a-script-fetched-by-curl

dotfiles_install_directory="${PWD}/.dotfiles"

if [[ ! -e "${dotfiles_install_directory}" ]]; then

	# Common path, if not already included, and it exists.
	# Fresh environments like on CentOS do not include this path. If this path is
	# not available during installation, each user will redundantly install things
	# that have been added to this PATH.
	[[ ":${PATH}:" != *":/usr/local/bin:"* ]] && [[ -e "/usr/local/bin" ]] && export PATH="/usr/local/bin:${PATH}"

	# Determine OS to determine the package manager used to install packages.
	OS=$(uname | awk '{print tolower($0)}')
	case "${OS}" in
		darwin*)
			OS="osx";;
		linux*)
			OS="nix";;
	esac

	echo -e "Preparing dotfiles install for the OS.\n"

	if command -v yum >/dev/null 2>&1; then
			echo "Installing git."
			yum -y install git
	elif [[ "${OS}" == "osx" ]]; then
			# Validate sudo user for any future operations. It will timeout after
			# five minutes by default, which means additional sudo commands would
			# prompt for validation again. This ensures less friction during install.
			# There are ways to extend that timeout, but for now this will suffice.
			sudo -v

			echo "Updating MacOS. This is necessary to ensure Xcode can be installed."
			echo "Note also that the dotfiles install may need to be restarted."
			# Ensure latest version of MacOS otherwise Xcode fails to install.
			sudo softwareupdate --install --os-only

			echo "Installing Xcode tools, and Rosetta if on Apple Silicon."
			sudo xcodebuild -license accept
			sudo xcode-select --install
			# This will only be run on supported chipsets. Intel chipsets
			# will just state this cannot be installed and move on.
			sudo softwareupdate --install-rosetta --agree-to-license

			echo "Installing Homebrew."
			if ! command -v brew >/dev/null 2>&1; then
				# https://github.com/Homebrew/install/?tab=readme-ov-file#install-homebrew-on-macos-or-linux
				NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
			fi

			dotfiles_homebrew_bin_path="/usr/local/bin"
			if [[ -e "/opt/homebrew/bin" ]]; then
					dotfiles_homebrewhiw_bin_path="/opt/homebrew/bin"
			fi
			eval "$($dotfiles_homebrew_bin_path/brew shellenv)"

			if [[ -e "$dotfiles_homebrew_bin_path/brew" ]]; then
					echo "Installing git, coreutils, and stow from Homebrew."
					"$dotfiles_homebrew_bin_path/brew" install git coreutils stow
			fi
	fi

	dotfiles_repo="git@github.com:danemacmillan/dotfiles.git"
	if [[ "${1}" == "nossh" ]]; then
		dotfiles_repo="https://github.com/danemacmillan/dotfiles.git"
	fi

	git clone "${dotfiles_repo}" "${dotfiles_install_directory}" \
	&& cd "${dotfiles_install_directory}" \
	&& source bin/dotfiles

else
	echo -e "Dotfiles already installed at: ${dotfiles_install_directory}"
fi
