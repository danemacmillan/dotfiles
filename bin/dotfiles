#!/usr/bin/env bash
cd "$(dirname "${BASH_SOURCE[0]}")" && source "../.dotfiles_includes" && cd - >/dev/null 2>&1

##
# Dotfiles - dotfiles
#
# The purpose of this script is to bootstrap the dotfiles dependencies and
# provide a quick utility for updating them.
#
# @author Dane MacMillan <work@danemacmillan.com>
# @link https://github.com/danemacmillan/dotfiles
# @license MIT
#
# @TODO
#  - abstract into function.
#  - do symlinking with cp command so no need to manually track files.

##
# Update repo from upstream.
echo -e "${BLUE}${BOLD}Updating dotfiles.${RESET}"
(cd "${DOTFILES_PATH}" && git stash && git pull && git stash pop)

##
# Create directories that will not be tracked by the repo.
#
# Their contents could be via symlinks from `$DOTFILES_PATH/*`, though.
if [[ ! -e "${XDG_CONFIG_HOME}/alacritty" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Creating '${XDG_CONFIG_HOME}/alacritty' directory.${RESET}"
	mkdir "${XDG_CONFIG_HOME}/alacritty"
fi

if [[ ! -e "${XDG_CONFIG_HOME}/htop" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Creating '${XDG_CONFIG_HOME}/htop' directory.${RESET}"
	mkdir "${XDG_CONFIG_HOME}/htop"
fi

if [[ ! -e "${HOME}/.ssh" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Creating '${HOME}/.ssh' directory.${RESET}"
	mkdir -p "${HOME}/.ssh"
	chown -R $USER:$USER "${HOME}/.ssh"
	chmod 700 "${HOME}/.ssh"
fi

if [[ ! -d "${HOME}/bin" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Creating '${HOME}/bin' directory.${RESET}"
	mkdir -p "${HOME}/bin"
fi

# Note that this will likely already be created by the `.xdg` file, by
# creating the i`$XDG_RUNTIME_DIR` environment variable and directory.
# Nevertheless, if another OS sets that variable differently, this user tmp
# directory should still be created.
if [[ ! -d "${HOME}/tmp" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Creating '${HOME}/tmp' directory.${RESET}"
	mkdir -p "${HOME}/tmp"
fi

##
# Copy file templates that will not be tracked by the repo.
if [[ ! -e "${HOME}/.extra" ]]; then
	echo -e "${BLUE}${BOLD}Copying '.extra' template file for custom dotfiles edits that will not be tracked.${RESET}"
	cp -v "${DOTFILES_PATH}/.extra" "${HOME}/.extra"
fi

if [[ ! -e "${HOME}/.gitconfig.local" ]]; then
	echo -e "${BLUE}${BOLD}Copying '.gitconfig.local' template file for custom changes. Add your Git credentials here.${RESET}"
	cp -v "${DOTFILES_PATH}/.gitconfig.local" "${HOME}/.gitconfig.local"
fi

#if [[ ! -f "${HOME}/.hgrc.local" ]]; then
#	echo -e "${BLUE}${BOLD}Copying '.hgrc.local' template file for custom changes. Add your Mercurial credentials here.${RESET}"
#	cp -v "${DOTFILES_PATH}/.hgrc.local" "${HOME}/.hgrc.local"
#fi

if [[ ! -e "${HOME}/.ssh/config" ]]; then
	echo -e "${BLUE}${BOLD}Copying '.ssh/config' template file for custom SSH credentials.${RESET}"
	cp -v "${DOTFILES_PATH}/.ssh/config" "${HOME}/.ssh/config"
	chmod 600 "${HOME}"/.ssh/*
fi

##
# Symlink all trackable files.
#
# Note that not all files within the `.dotfiles` directory are symlinked into
# the user home directory, as they are only used internally by these dotfiles.
echo -e "${RESET}${BLUE}${BOLD}Symlinking dotfiles.${RESET}${GREEN}${DIM}"
###ln -vsfn "${DOTFILES_PATH}"/bin/* "${HOME}/bin/"
ln -vsfn "${DOTFILES_PATH}/.config/alacritty/alacritty.yml" "${XDG_CONFIG_HOME}/alacritty/alacritty.yml"
ln -vsfn "${DOTFILES_PATH}/.config/htop/htoprc" "${XDG_CONFIG_HOME}/htop/htoprc"
#ln -vsfn "${DOTFILES_PATH}/.ssh/rc" "${HOME}/.ssh/rc"
###ln -vsfn "${DOTFILES_PATH}/.aliases" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.bash_completion" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.bash_profile" "${HOME}/"
###ln -vsfn "${DOTFILES_PATH}/.bash_prompt" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.bash_sessions_disable" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.bashrc" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.ctags" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.digrc" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.dir_colors" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.dotfiles_includes" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.editorconfig" "${HOME}/"
###ln -vsfn "${DOTFILES_PATH}/.formatting" "${HOME}/"
###ln -vsfn "${DOTFILES_PATH}/.functions" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.gitconfig" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.gitignore" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.grcat" "${HOME}/"
#ln -vsfn "${DOTFILES_PATH}/.hgrc" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.ignore" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.inputrc" "${HOME}/"
###ln -vsfn "${DOTFILES_PATH}/.macos_defaults" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.mackup.cfg" "${HOME}/"
#ln -vsfn "${DOTFILES_PATH}/.mozconfig" "${HOME}/"
#ln -vsfn "${DOTFILES_PATH}/.my.cnf" "${HOME}/.my.cnf.sample"
ln -vsfn "${DOTFILES_PATH}/.myclirc" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.mytop" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.npmrc" "${HOME}/"
###ln -vsfn "${DOTFILES_PATH}/.path" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.rsync_excludes" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.siegerc" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.tmux.conf" "${HOME}/"
ln -vsfn "${DOTFILES_PATH}/.vimrc" "${HOME}/"

##
# Create symlink to iCloud Drive.
#
# This will be placed in the user home directory if the iCloud Drive
# directory path exists. This will only exist on MacOS.
if [[ ! -e "${HOME}/iCloud" ]] \
	&& [[ -e "${HOME}/Library/Mobile Documents/com~apple~CloudDocs" ]] \
; then
	echo -e "${RESET}${BLUE}${BOLD}Creating '${HOME}/iCloud' symlink.${RESET}"
	ln -vsfn "${HOME}/Library/Mobile Documents/com~apple~CloudDocs" "${HOME}/iCloud"
fi

##
# Symlink trackable directories that could exist, and back up to `tmp`.
if [[ -e "${HOME}/.mackup" ]] \
	&& [[ ! -L "${HOME}/.mackup" ]] \
	&& [[ ! -e "${HOME}/tmp/.mackup" ]] \
; then
	echo -e "${RESET}${BLUE}${BOLD}Backing up existing ~/.mackup directory to ~/tmp.${RESET}"
	mv "${HOME}/.mackup" "${HOME}/tmp/.mackup"
fi
ln -vsfn "${DOTFILES_PATH}/.mackup" "${HOME}/"

if [[ -e "${HOME}/.vim" ]] \
	&& [[ ! -L "${HOME}/.vim" ]] \
	&& [[ ! -e "${HOME}/tmp/.vim" ]] \
; then
	echo -e "${RESET}${BLUE}${BOLD}Backing up existing ~/.vim directory to ~/tmp.${RESET}"
	mv "${HOME}/.vim" "${HOME}/tmp/.vim"
fi
ln -vsfn "${DOTFILES_PATH}/.vim" "${HOME}/"

if [[ -e "${HOME}/.weechat" ]] \
	&& [[ ! -L "${HOME}/.weechat" ]] \
	&& [[ ! -e "${HOME}/tmp/.weechat" ]] \
; then
	echo -e "${RESET}${BLUE}${BOLD}Backing up existing ~/.weechat directory to ~/.weechat.${RESET}"
	mv "${HOME}/.weechat" "${HOME}/tmp/.weechat"
fi
ln -vsfn "${DOTFILES_PATH}/.weechat" "${HOME}/"

##
# Add `dotfiles` and `dpm` executable scripts into `~/bin`.
#if [[ ! -f "$HOME/bin/dotfiles" ]]; then
#	ln -vsfn "${DOTFILES_PATH}/dotfiles" "${HOME}/bin/"
#fi
#
#if [[ ! -f "$HOME/bin/dpm" ]]; then
#	ln -vsfn "${DOTFILES_PATH}/dpm" "${HOME}/bin/"
#fi

##
# Install dotfiles package manager packages.
#
# Note that this needs to be sourced so the hashes are available in the session,
# and also needs to be run at the beginning of a session in case new additions
# are made to the dpm files, which can then immediately be updated by comparing
# against the value of these hashes made at the beginning of a session.
source "${DOTFILES_PATH}/bin/dpm" --install

##
# Use local, most recent version of Bash, if available.
export PREFERRED_SHELL="/usr/local/bin/bash"
if [[ "${SHELL}" != "${PREFERRED_SHELL}" ]] \
	&& [[ -e "${PREFERRED_SHELL}" ]] \
; then
	echo -e "${BLUE}${BOLD}Updating default SHELL to ${PREFERRED_SHELL}. This will require sudo.${RESET}"
	echo -e "Close and re-open the terminal for this change to take effect."
	sudo chsh -s "${PREFERRED_SHELL}" $(whoami)
fi

##
# Source any MacOS-specific defaults
if command_exists defaults ; then
	echo -e "${BLUE}${BOLD}Setting MacOS defaults.${RESET}"
	source "${DOTFILES_PATH}/.macos_defaults"
fi

##
# Cleanup any legacy associations from older versions of this dotfiles repo.
echo -e "${BLUE}${BOLD}Cleaning up any legacy dotfiles data.${RESET}"
unalias dotfiles 2&>/dev/null
rm "${HOME}/.dfconfig" 2&>/dev/null
rm -rf "${HOME}/.dotfiles-packages" 2&>/dev/null
symlinks -d "${HOME}" 2&>/dev/null

##
# Create symlink to dotfiles install path into home directory, for quick access.
if [[ ! -e "${HOME}/.dotfiles" ]]; then
	echo -e "${BLUE}${BOLD}Creating symlink to dotfiles install path into home directory.${RESET}"
	ln -vsfn "${DOTFILES_PATH}" "${HOME}/"
fi

##
# Update terminal
echo -e "${BLUE}${BOLD}Updating terminal with new profile.${RESET}"
source "${HOME}/.bash_profile"
echo -e "${WHITE}${BOLD}Done!${RESET}"
