#!/usr/bin/env bash
cd "$(dirname "${BASH_SOURCE[0]}")" && source "../bootstrap" && cd - >/dev/null 2>&1

##
# Dotfiles - dotfiles
#
# The purpose of this script is to bootstrap the dotfiles dependencies and
# provide a quick utility for updating them.
#
# @author Dane MacMillan <work@danemacmillan.com>
# @link https://github.com/danemacmillan/dotfiles
# @license MIT
#
# @TODO
#  - abstract into function.
#  - do symlinking with cp command so no need to manually track files.
echo -e "${BLUE}${BOLD}Running dotfiles chores...${RESET}"

##
# Update repo from upstream.
echo -e "${BLUE}${BOLD}Updating dotfiles repository.${RESET}"
(cd "${DOTFILES_PATH}" && git stash && git pull && git stash pop)

##
# Ensure any file changes are immediately reflected in current environment.
#
# Assigning DOTFILES_PATH to empty string ensures that all the relevant
# environment variable values are rediscovered are reassigned.
export DOTFILES_PATH=""
cd "$(dirname "${BASH_SOURCE[0]}")" && source "../bootstrap" && cd - >/dev/null 2>&1

##
# Cleanup any legacy associations from older versions of this dotfiles repo.
echo -e "${BLUE}${BOLD}Cleaning up any legacy dotfiles data.${RESET}"
unalias dotfiles 2&>/dev/null
symlinks -d "${HOME}" 2&>/dev/null
symlinks -d "${HOME}/bin" 2&>/dev/null
[[ -e "${HOME}/.gitconfig" ]] && unlink "${HOME}/.gitconfig"
[[ -f "${HOME}/.hgrc.local" ]] && rm "${HOME}/.hgrc.local"
[[ -e "${XDG_CONFIG_HOME}/alacritty" ]] && rm -rf "${XDG_CONFIG_HOME}/alacritty"
[[ -e "${XDG_CONFIG_HOME}/htop" ]] && rm -rf "${XDG_CONFIG_HOME}/htop"

##
# Create directories that will not be tracked by the repo.
#
# Their contents could be via symlinks from `$DOTFILES_PATH/*`, though.
echo -e "${BLUE}${BOLD}Creating any missing directories.${RESET}"

if [[ ! -e "${XDG_DATA_HOME}/bash" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Creating '${XDG_DATA_HOME}/bash' directory.${RESET}"
	mkdir -p "${XDG_DATA_HOME}/bash"
fi
if [[ ! -e "${DOTFILES_BASH_HISTORY_PATH}" ]]; then
	touch "${DOTFILES_BASH_HISTORY_PATH}"
	if [[ -e "${HOME}/.bash_history" ]]; then
		mv -f "${HOME}/.bash_history" "${DOTFILES_BASH_HISTORY_PATH}"
	fi
fi

# Non-eager bash_completion (v2) directory.
#
# As long as bash_completion version 2 is installed, putting completions in
# this directory essentially means that the completions will only load the
# moment they are needed, versus having them parsed and in memory all the time
# (eager) if the ~/.bash_completion file or /etc/completion.d paths exist.
#
# Read more about this:
# - https://github.com/scop/bash-completion#faq
# - https://github.com/scop/bash-completion/blob/master/bash_completion#L2034
# - https://github.com/scop/bash-completion/blob/master/doc/bash_completion.txt
#
# This will also uninstall outdated version of bash-completion package. The
# existence of this specific path signals that modern v2 bash completions are
# in use.
if [[ ! -e "${XDG_DATA_HOME}/bash-completion/completions" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Creating non-eager bash_completion (v2) directory.${RESET}"
	mkdir -p "${XDG_DATA_HOME}/bash-completion/completions"
	if command_exists brew; then
		brew uninstall bash-completion
	fi
fi

if [[ ! -e "${HOME}/.ssh" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Creating '${HOME}/.ssh' directory.${RESET}"
	mkdir -p "${HOME}/.ssh"
	chown -R $USER:$USER "${HOME}/.ssh"
	chmod 700 "${HOME}/.ssh"
fi

if [[ ! -e "${XDG_DATA_HOME}/vim" ]] ; then
	echo -e "${RESET}${BLUE}${BOLD}Creating ${XDG_DATA_HOME}/vim directories.${RESET}"
	mkdir -p "${XDG_DATA_HOME}"/vim/{autoload,backup,plugged,swap,undo}
fi

if [[ ! -e "${HOME}/bin" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Creating '${HOME}/bin' directory.${RESET}"
	mkdir -p "${HOME}/bin"
fi

# Note that this will likely already be created by the
# `xdg_base_directory_specification` file, by creating the `$XDG_RUNTIME_DIR`
# environment variable and directory. Nevertheless, if another OS sets that
# variable differently, this user tmp directory should still be created.
if [[ ! -d "${HOME}/tmp" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Creating '${HOME}/tmp' directory.${RESET}"
	mkdir -p "${HOME}/tmp"
fi

##
# Generate local configs that can be customized. These do not go in repo.
echo -e "${BLUE}${BOLD}Generating local configs in: ${XDG_DATA_HOME}/dotfiles.${RESET}"
source "${DOTFILES_PATH}/source/local_config_templates"

##
# Symlink all trackable files.
#
# Note that not all files within the `$DOTFILES_PATH` directory are symlinked
# into the user home directory, as they are only used internally by these
# dotfiles.
echo -e "${RESET}${BLUE}${BOLD}Symlinking dotfiles.${RESET}${GREEN}${DIM}"

# XDG
ln_relative "${DOTFILES_PATH}/home/.config/alacritty" "${XDG_CONFIG_HOME}/alacritty"
ln_relative "${DOTFILES_PATH}/home/.config/bash-completion" "${XDG_CONFIG_HOME}/bash-completion"
ln_relative "${DOTFILES_PATH}/home/.config/dircolors" "${XDG_CONFIG_HOME}/dircolors"
ln_relative "${DOTFILES_PATH}/home/.config/git" "${XDG_CONFIG_HOME}/git"
ln_relative "${DOTFILES_PATH}/home/.config/htop" "${XDG_CONFIG_HOME}/htop"
ln_relative "${DOTFILES_PATH}/home/.config/npm" "${XDG_CONFIG_HOME}/npm"
ln_relative "${DOTFILES_PATH}/home/.config/mycli" "${XDG_CONFIG_HOME}/mycli"
ln_relative "${DOTFILES_PATH}/home/.config/readline" "${XDG_CONFIG_HOME}/readline"
ln_relative "${DOTFILES_PATH}/home/.config/ripgrep" "${XDG_CONFIG_HOME}/ripgrep"
ln_relative "${DOTFILES_PATH}/home/.config/rsync" "${XDG_CONFIG_HOME}/rsync"
ln_relative "${DOTFILES_PATH}/home/.config/siege" "${XDG_CONFIG_HOME}/siege"
ln_relative "${DOTFILES_PATH}/home/.config/tmux" "${XDG_CONFIG_HOME}/tmux"
ln_relative "${DOTFILES_PATH}/home/.config/vim" "${XDG_CONFIG_HOME}/vim"
ln_relative "${DOTFILES_PATH}/home/.config/weechat" "${XDG_CONFIG_HOME}/weechat"
ln_relative "${DOTFILES_PATH}/home/.local/bin/diff-so-fancy" "${XDG_BIN_HOME}/"
ln_relative "${DOTFILES_PATH}/home/.local/bin/imgcat" "${XDG_BIN_HOME}/"
ln_relative "${DOTFILES_PATH}/home/.local/bin/ydiff" "${XDG_BIN_HOME}/"
ln_relative "${DOTFILES_PATH}/home/.local/share/bash-completion/completions/linus" "${XDG_DATA_HOME}/bash-completion/completions/"
ln_relative "${DOTFILES_PATH}/home/.local/share/bash-completion/completions/vshell" "${XDG_DATA_HOME}/bash-completion/completions/"

# Non-XDG
ln_relative "${DOTFILES_PATH}/home/.bash_profile" "${HOME}/"
ln_relative "${DOTFILES_PATH}/home/.bash_sessions_disable" "${HOME}/"
ln_relative "${DOTFILES_PATH}/home/.bashrc" "${HOME}/"
ln_relative "${DOTFILES_PATH}/home/.editorconfig" "${HOME}/"

##
# Create symlink to iCloud Drive.
#
# This will be placed in the user home directory if the iCloud Drive
# directory path exists. This will only exist on MacOS.
if [[ ! -e "${HOME}/iCloud" ]] \
	&& [[ -e "${HOME}/Library/Mobile Documents/com~apple~CloudDocs" ]] \
; then
	echo -e "${RESET}${BLUE}${BOLD}Creating '${HOME}/iCloud' symlink.${RESET}"
	ln_relative "${HOME}/Library/Mobile Documents/com~apple~CloudDocs" "${HOME}/iCloud"
fi

##
# Install dotfiles package manager packages.
#
# Note that this needs to be sourced so the hashes are available in the session,
# and also needs to be run at the beginning of a session in case new additions
# are made to the dpm files, which can then immediately be updated by comparing
# against the value of these hashes made at the beginning of a session.
source "${DOTFILES_PATH}/bin/dpm" --install

##
# Use local, most recent version of Bash, if available.
export PREFERRED_SHELL="/usr/local/bin/bash"
if [[ "${SHELL}" != "${PREFERRED_SHELL}" ]] \
	&& [[ -e "${PREFERRED_SHELL}" ]] \
; then
	echo -e "${BLUE}${BOLD}Updating default SHELL to ${PREFERRED_SHELL}. This will require sudo.${RESET}"
	echo -e "Close and re-open the terminal for this change to take effect."
	sudo chsh -s "${PREFERRED_SHELL}" $(whoami)
fi

##
# Fix up rclone completion.
#
# Rclone uses the old version of bash_completion, which ALWAYS eagerly loads
# completion files into memory. That causes extremely slow shell startups.
# Rclone has a massive completion file, which adds several hundred ms to the
# start up times.
#
# This will check if modern bash_completion (v2) is available,
# check if an rclone completion file exists at the old location, and if both
# these conditions are true, it will be recreated at the non-eager location,
# that loads completions only when requested.
#
# For now this has only been tested on MacOS.
# brew --prefix rclone
if [[ -e "/usr/local/share/bash-completion/completions" ]] \
	&& [[ ! -e "/usr/local/share/bash-completion/completions/rclone" ]] \
	&& [[ -e "/usr/local/opt/rclone/etc/bash_completion.d/rclone" ]] \
; then
	rm /usr/local/etc/bash_completion.d/rclone 2&>/dev/null
	rm /etc/bash_completion.d/rclone 2&>/dev/null
	ln -s /usr/local/opt/rclone/etc/bash_completion.d/rclone /usr/local/share/bash-completion/completions
fi

##
# Source any MacOS-specific defaults
if command_exists defaults ; then
	echo -e "${BLUE}${BOLD}Setting MacOS defaults.${RESET}"
	source "${DOTFILES_PATH}/source/os.macos"
fi

##
# Update terminal
echo -e "${BLUE}${BOLD}Updating terminal with new profile.${RESET}"
source "${HOME}/.bash_profile"
echo -e "${WHITE}${BOLD}Done!${RESET}"
