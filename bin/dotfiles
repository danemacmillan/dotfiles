#!/usr/bin/env bash
cd "$(dirname "${BASH_SOURCE[0]}")" && source "../source/bootstrap.sh" && cd - >/dev/null 2>&1

##
# Dotfiles - dotfiles
#
# The purpose of this script is to bootstrap the dotfiles dependencies and
# provide a quick utility for updating them.
#
# Basic command arguments can be passed:
#  dotfiles stow - Create all symlinks.
#  dotfiles unstow - Unlink all symlinks.
#  dotfiles restow - Unlink and relink all symlinks.
#  dotfiles skippackages - Run without installing/updating packages.
#
# @author Dane MacMillan <work@danemacmillan.com>
# @link https://github.com/danemacmillan/dotfiless
# @license MIT


##
# Symlink the dotfiles from multiple locations.
#
# To ensure integrity, both locations need to succeed and fail together,
# otherwise there can be a case where the first `stow` operation fails, and then
# the second one succeeds. The result is a unexpected state for the symlinks to
# be in. This is why ${stow_exitcode} is checked.
#
# 1) dotfiles symlinks.
#
# Note that not all files within the `$DOTFILES_PATH` directory are symlinked
# into the user home directory, as they are only used internally by these
# dotfiles. Only the ones in the "home" directory are used.
#
#
# 2) iCloud symlinks.
#
# Special technique for these dotfiles: this will symlink/stow everything
# found under a directory that matches the ${USER} of the current machine within
# a user's iCloud Drive; that path needs to equal the following to run:
# /Users/${USER}/Library/Mobile Documents/com~apple~CloudDocs/${USER}
#
# The purpose of this is to provide a secure, persistent location for any
# configuration files that contain sensitive information that are difficult
# to abstract out. In other words, the repository contents of these `dotfiles`
# contain public non-sensitive configuration data, while anything found at this
# path will usually contain private configuration data.
#
# One thing to note about running this is that `stow` is used for symlinking
# the files, and if they detect existing files or directories in the user's
# home directory, they will be considered conflicts and the operation aborted.
# Ensure that the data stored in iCloud Drive does not overlap/conflict with
# the data stored in these dotfiles.
__dotfiles_stow()
{
	if [[ ! -L "${HOME}/.bashrc" ]]; then
		echo -e "Add dotfiles symlinks:"
		echo -e "======================"

		local stow_exitcode=0
		if [[ -e "${ICLOUD_USER_HOME}" ]]; then
			echo -e "\n - symlink paths in: ${ICLOUD_USER_HOME}\n"
			stow -d "${ICLOUD_DIRECTORY_LONG}" -t "${HOME}" -S ${USER} --ignore=\.DS_Store$ --ignore=map-icloud-home$ -v
			stow_exitcode=$?
		fi

		if [[ "${stow_exitcode}" -eq 0 ]]; then
			echo -e "\n - symlink paths in: ${DOTFILES_PATH}/home\n"
			stow -d "${DOTFILES_PATH}" -t "${HOME}" -S "home" --ignore=\.DS_Store$ -v
		fi
	else
		echo -e "Dotfiles may have detected a symlink conflict."
		echo -e "The following sample file is already a symlink: ${HOME}/.bashrc"
	fi
}

__dotfiles_unstow()
{
	if [[ -L "${HOME}/.bashrc" ]]; then
		echo -e "Remove dotfiles symlinks:"
		echo -e "========================="

		local stow_exitcode=0
		if [[ -e "${ICLOUD_USER_HOME}" ]]; then
			echo -e "\n - symlink paths in: ${ICLOUD_USER_HOME}\n"
			stow -d "${ICLOUD_DIRECTORY_LONG}" -t "${HOME}" -D ${USER} --ignore=\.DS_Store$ --ignore=map-icloud-home$ -v
			stow_exitcode=$?
		fi

		if [[ "${stow_exitcode}" -eq 0 ]]; then
			echo -e "\n - symlink paths in: ${DOTFILES_PATH}/home\n"
			stow -d "${DOTFILES_PATH}" -t "${HOME}" -D "home" --ignore=\.DS_Store$ -v
		fi
	else
		echo -e "Dotfiles may have detected a symlink error."
		echo -e "The following sample file is not already symlink: ${HOME}/.bashrc"
		echo -e "If this is the first time running, this can be ignored."
	fi
}

__dotfiles_restow()
{
	__dotfiles_unstow
	__dotfiles_stow
}

##
# Stow dotfiles symlinks.
if [[ "${1}" == "stow" ]]; then
	__dotfiles_stow
	exit 0
fi

##
# Unstow dotfiles symlinks.
if [[ "${1}" == "unstow" ]]; then
	__dotfiles_unstow
	exit 0
fi

##
# Restow dotfiles symlinks.
if [[ "${1}" == "restow" ]]; then
	__dotfiles_restow
	exit 0
fi

##
# Install dotfiles.
echo -e "${BLUE}${BOLD}Run dotfiles (${DOTFILES_PATH})...${RESET}"

##
# Ensure iCloud has downloaded relevant files, so get process started.
#
# This will only try to download content if the specific directory exists. For
# most users of these dotfiles, this will not run, unless they want to leverage
# the integrated iCloud technique being used.
if [[ -d "${ICLOUD_USER_HOME}" ]]; then
	echo -e "Download possibly evicted iCloud data at path ${ICLOUD_USER_HOME}."
	brctl download "${ICLOUD_USER_HOME}"
fi

##
# Update repo from upstream.
#echo -e "${BLUE}${BOLD}Update dotfiles repository.${RESET}"
#(cd "${DOTFILES_PATH}" && git stash && git pull && git stash pop)

##
# Ensure any file changes are immediately reflected in current environment.
#
# Assigning DOTFILES_PATH to empty string ensures that all the relevant
# environment variable values are rediscovered and reassigned.
export DOTFILES_PATH=""
cd "$(dirname "${BASH_SOURCE[0]}")" && source "../source/bootstrap.sh" && cd - >/dev/null 2>&1

##
# Basic directory structures that need to exist before symlinks are built.

# Ensure multiple stow packages do not conflict with each other.
# This is mostly needed so that each stow package does not attempt to take
# ownership of these paths. These are the few paths that are currently shared
# across multiple stow packages.
[[ ! -e "${XDG_CONFIG_HOME}/.keep" ]] && touch "${XDG_CONFIG_HOME}/.keep"
[[ ! -e "${XDG_DATA_HOME}/.keep" ]] && touch "${XDG_DATA_HOME}/.keep"
[[ ! -e "${XDG_BIN_HOME}/.keep" ]] && touch "${XDG_BIN_HOME}/.keep"

#Vim
if [[ ! -e "${XDG_DATA_HOME}/vim" ]] ; then
	echo -e "${RESET}${BLUE}${BOLD}Create ${XDG_DATA_HOME}/vim directories.${RESET}"
	#mkdir -p "${XDG_DATA_HOME}"/vim/{autoload,backup,plugged,swap}
fi
[[ ! -e "${XDG_DATA_HOME}/vim/autoload" ]] && mkdir -p "${XDG_DATA_HOME}/vim/autoload"
[[ ! -e "${XDG_DATA_HOME}/vim/backup" ]] && mkdir -p "${XDG_DATA_HOME}/vim/backup"
[[ ! -e "${XDG_DATA_HOME}/vim/plugged" ]] && mkdir -p "${XDG_DATA_HOME}/vim/plugged"
[[ ! -e "${XDG_DATA_HOME}/vim/swap" ]] && mkdir -p "${XDG_DATA_HOME}/vim/swap"
[[ ! -e "${XDG_DATA_HOME}/vim" ]] && mkdir -p "${XDG_DATA_HOME}/vim"

# Create symlink to iCloud Drive.
#
# This will be placed in the user home directory if the iCloud Drive
# directory path exists. This will only exist on MacOS.
if [[ ! -e "${ICLOUD_DIRECTORY_SHORT}" ]] \
	&& [[ -d "${ICLOUD_DIRECTORY_LONG}" ]] \
; then
	echo -e "${RESET}${BLUE}${BOLD}Create '${HOME}/iCloud' symlink.${RESET}"
	ln_relative "${ICLOUD_DIRECTORY_LONG}" "${HOME}/iCloud"
fi

##
# Cleanup any legacy associations from older versions of this dotfiles repo.
# Note that it will no longer run by default, so if there is a need to clean
# up anything, source that file manually.
#source "${DOTFILES_PATH}/source/legacy.sh"

##
# Symlink dotfiles: regular and iCloud.
__dotfiles_restow

# Create symlink to special tmp directory.
#
# Note that this will likely already be created by the
# `xdg_base_directory_specification` file, by creating the `$XDG_RUNTIME_DIR`
# environment variable and directory. Nevertheless, if another OS sets that
# variable differently, this user tmp directory should still be created.
if [[ ! -e "${HOME}/tmp" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Symlinking '${HOME}/tmp' directory.${RESET}"
	ln -ns ${XDG_RUNTIME_DIR} "${HOME}/tmp"
fi

##
# Create directories that will not be tracked by the repo.
#
# Their contents could be via symlinks from `$DOTFILES_PATH/*`, though.
echo -e "${BLUE}${BOLD}Creating any missing directories.${RESET}"

# SSH
if [[ ! -e "${HOME}/.ssh" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Creating '${HOME}/.ssh' directory.${RESET}"
	mkdir -p "${HOME}/.ssh"
	chown -R $USER:$USER "${HOME}/.ssh"
	chmod 700 "${HOME}/.ssh"
fi

# Bash
if [[ ! -e "${XDG_DATA_HOME}/bash" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Creating '${XDG_DATA_HOME}/bash' directory.${RESET}"
	mkdir -p "${XDG_DATA_HOME}/bash"
fi
if [[ ! -e "${DOTFILES_BASH_HISTORY_PATH}" ]]; then
	touch "${DOTFILES_BASH_HISTORY_PATH}"
	if [[ -e "${HOME}/.bash_history" ]]; then
		mv -f "${HOME}/.bash_history" "${DOTFILES_BASH_HISTORY_PATH}"
	fi
fi

# Tig: https://github.com/jonas/tig/blob/master/doc/manual.adoc#history-files
if [[ ! -e "${XDG_DATA_HOME}/tig" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Creating '${XDG_DATA_HOME}/tig' directory.${RESET}"
	mkdir -p "${XDG_DATA_HOME}/tig"

#	if [[ ! -f "${XDG_DATA_HOME}/tig/history" ]]; then
#		touch "${XDG_DATA_HOME}/tig/history"
#	fi
fi

#Vim
[[ ! -e "${XDG_DATA_HOME}/vim/undo" ]] && mkdir -p "${XDG_DATA_HOME}/vim/undo"

# Non-eager bash_completion (v2) directory.
#
# As long as bash_completion version 2 is installed, putting completions in
# this directory essentially means that the completions will only load the
# moment they are needed, versus having them parsed and in memory all the time
# (eager) if the ~/.bash_completion file or /etc/completion.d paths exist.
#
# Read more about this:
# - https://github.com/scop/bash-completion#faq
# - https://github.com/scop/bash-completion/blob/master/bash_completion#L2034
# - https://github.com/scop/bash-completion/blob/master/doc/bash_completion.txt
#
# This will also uninstall outdated version of bash-completion package. The
# existence of this specific path signals that modern v2 bash completions are
# in use.
if [[ ! -e "${XDG_DATA_HOME}/bash-completion/completions" ]]; then
	echo -e "${RESET}${BLUE}${BOLD}Creating non-eager bash_completion (v2) directory.${RESET}"
	mkdir -p "${XDG_DATA_HOME}/bash-completion/completions"
	if command_exists brew; then
		brew uninstall bash-completion
	fi
fi

##
# Generate local configs that can be customized. These do not go in repo.
echo -e "${BLUE}${BOLD}Generating local configs in: ${XDG_DATA_HOME}/dotfiles.${RESET}"
source "${DOTFILES_PATH}/source/local_config_templates.sh"

##
# Install dotfiles package manager (DPM) packages.
#
# Note that this needs to be sourced so the hashes are available in the session,
# and also needs to be run at the beginning of a session in case new additions
# are made to the dpm files, which can then immediately be updated by comparing
# against the value of these hashes made at the beginning of a session.

# Install package dependencies only if option passed.
if [[ "${1}" == "skippackages" ]]; then
	echo -e "${BLUE}${BOLD}Skip dotfiles' packages install.${RESET}"
else
	source "${DOTFILES_PATH}/bin/dpm" --install
fi

##
# Use local, most recent version of Bash, if available.
export PREFERRED_SHELL="${NIX_PROFILE_USER_PATH}/bin/bash"
if [[ "${SHELL}" != "${PREFERRED_SHELL}" ]] \
	&& [[ -e "${PREFERRED_SHELL}" ]] \
; then
	echo -e "${BLUE}${BOLD}Updating default SHELL to ${PREFERRED_SHELL}. This will require sudo.${RESET}"
	echo -e "Close and re-open the terminal for this change to take effect."
	sudo chsh -s "${PREFERRED_SHELL}" $(whoami)
fi

##
# Source any MacOS-specific defaults
if command_exists defaults ; then
	echo -e "${BLUE}${BOLD}Setting MacOS defaults.${RESET}"
	source "${DOTFILES_PATH}/source/os.macos.sh"
fi

##
# Update terminal
echo -e "${BLUE}${BOLD}Updating terminal with new profile.${RESET}"
source "${HOME}/.bash_profile"
echo -e "${WHITE}${BOLD}Done!${RESET}"
