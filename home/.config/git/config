# Based on https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig

[alias]

	# Custom log formats
	ll = log --graph --all --decorate --pretty=format:'%C(auto)%h%d  %ad %C(red bold)(%ar%C(red bold))%Creset  %Creset%C(magenta)%an %Creset<%ae>  %C(white bold)%<(80,trunc)%s' --date=iso
	l = log -n 40 --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(blue bold)<%an>%Creset'

	# View the current working tree status using the short format
	s = status -s

	# View status of working tree but suppress listing untracked files
	ss = status -uno

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Clone a repository including all submodules
	#c = clone --recursive

	# Commit all changes
	#ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Merge GitHub pull request on top of the `master` branch
	mpr = "!f() { \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git rebase master pr/$1 && \
			git checkout master && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"

	# Prune deleted remote branches and delete local merged branches
	purge = !"git fetch --all -p && git branch --merged | grep -v develop | grep -v stage | grep -v master | xargs -n 1 git branch -d"

	ydiff = !"ydiff -s -w80 --wrap -U10"

	d = !"git difftool"

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# http://adaptivepatchwork.com/2012/03/01/mind-the-end-of-your-line/
	eol = native
	autocrlf = input
	safecrlf = true

	# In reference to https://github.com/gmarik/Vundle.vim/issues/167
	#editor = /usr/local/bin/vim
	editor = vim

	ignorecase = false

	# Disable filemode: http://stackoverflow.com/questions/2517339/how-to-recover-the-file-permissions-to-what-git-thinks-the-file-should-be
	filemode = false

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	#whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up index on slow NFS systems.
	preloadindex = true

	# https://github.com/so-fancy/diff-so-fancy
	#pager = diff-so-fancy | less --tabs=4 -RFX --pattern '^(Date|added|deleted|modified):'
	#pager = diff-so-fancy | less --tabs=4 -RFX

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = true

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow
	frag = magenta bold
	old = red bold
	new = green bold
	commit = yellow bold
	whitespace = red reverse

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[color "diff-highlight"]

	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[diff-so-fancy]

	useUnicodeRuler = false

[diff]

	# Detect copies as well as renames
	renames = copies
	tool = vimdiff
	context = 5

[difftool]

	prompt = true
	trustExitCode = true

[difftool "vimdiff"]

	cmd = vimdiff -R -- \"$LOCAL\" \"$REMOTE\"

[help]

	# Automatically correct and execute mistyped commands. Keep this off unless
	# you enjoy pain.
	autocorrect = 0

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true
	tool = vimdiff
	conflictstyle = diff3

[mergetool]

	keepBackup = false
	prompt = true
	trustExitCode = true

[pull]

# How to reconcile divergent branches on a pull.
	ff = only

[push]

	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	#default = matching
	default = current

[filter "lfs"]

	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true

[include]

	# Include user-specific info like git credentials.
	path = ~/.local/share/dotfiles/gitconfig.local

