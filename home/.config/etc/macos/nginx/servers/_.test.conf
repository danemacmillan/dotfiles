# PHP upstream.
upstream php-www {
    server 127.0.0.1:9000;
}

# Proxy to either Varnish, if available, or the main server block.
upstream orchestrate {
    server 127.0.0.1:6081;
    server 127.0.0.1:8080 backup;
}

# HTTP
# Catch all non-SSL traffic and redirect to non-www with SSL.
server {
    listen *:80;
    server_name _;

    return 301 https://$host$request_uri;
}

# All requests come to this.
server {
    # If HTTPS server requests have no match, use this server block.
    # It's very important that default_server is defined here as well, as it
    # will dictate where requests go if nothing is found. It's especially
    # important for GCP, as its load balancers will fail without it.
    listen *:443 ssl http2 default_server;
    server_name _;

    ssl_certificate /usr/local/etc/nginx/ssl/_.test.crt;
    ssl_certificate_key /usr/local/etc/nginx/ssl/_.test.key;
    include ssl.conf;

    include realip.conf;
    include security.conf;

    ##
    # Pass internall to orchestrate upstream.
    #
    # The upstream will either pass the request to Varnish, which will then in
    # turn communicate with the main server block on 127.0.0.1:8080, or, if
    # Varnish is unavailable, the orchestrate upstream will directly
    # communicate with the main server block.
    #
    location / {
        proxy_pass http://orchestrate;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Ssl-Offloaded "1";
        proxy_set_header HTTPS "on";
        proxy_set_header X-Forwarded-Proto https;
    }
}

# Actual location where app gets served.
# Varnish connects to this, and Nginx as a backup if Varnish is unavailable.
server {
    # If non-https server requests have no match, use this server block.
    listen 127.0.0.1:8080 default_server;
    server_name _;

    # App-level configurations.
    # For a basic PHP app, use the first app config, otherwise use the more
    # advanced app-level configurations. Only one should be included at a time.
		# Include a different app config to be compatible with specific app code.
		# Note that it needs to specify its own root and comment out the one above.
    #include app.php.conf;
    include app.magento2.conf;
}
