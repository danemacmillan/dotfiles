#
# plugins.conf -- weechat v1.0.1
#

[var]
fifo.fifo = "on"
guile.check_license = "off"
lua.check_license = "off"
lua.pastebuf.color_line = "default,default"
lua.pastebuf.color_line_number = "default,darkgray"
lua.pastebuf.fetch_timeout = "30000"
lua.pastebuf.highlighter_timeout = "3000"
lua.pastebuf.open_unsupported_url = "0"
lua.pastebuf.shell = "/bin/bash"
lua.pastebuf.show_line_number = "1"
lua.pastebuf.sticky_notes_retardness_level = "1"
lua.pastebuf.syntax_highlighter = ""
lua.urlselect.buffer_name = "normal"
lua.urlselect.buffer_name_color = "green"
lua.urlselect.buffer_number_color = "brown"
lua.urlselect.cmd.i = "/input insert ${url}\x20"
lua.urlselect.cmd.u = "/exec -bg -nosh open ${url}"
lua.urlselect.help_color = "default"
lua.urlselect.highlight_color = "214,default"
lua.urlselect.index_color = "brown"
lua.urlselect.key_color = "cyan"
lua.urlselect.message_color = "default"
lua.urlselect.nick_color = ""
lua.urlselect.scan_merged_buffers = "0"
lua.urlselect.search_prompt_color = "default"
lua.urlselect.search_scope = "url"
lua.urlselect.search_scope_color = "green"
lua.urlselect.status_color = "black,green"
lua.urlselect.status_timeout = "1300"
lua.urlselect.tags = "notify_message,notify_private,notify_highlight"
lua.urlselect.time_color = "default"
lua.urlselect.time_format = "%H:%M:%S"
lua.urlselect.title_color = "default"
lua.urlselect.url_color = "_lightblue"
lua.urlselect.use_simple_matching = "0"
perl.beep.beep_command_dcc = "$bell"
perl.beep.beep_command_highlight = "$bell"
perl.beep.beep_command_pv = "$bell"
perl.beep.beep_command_timeout = "30000"
perl.beep.beep_dcc = "on"
perl.beep.beep_highlight = "on"
perl.beep.beep_highlight_blacklist = "off"
perl.beep.beep_highlight_whitelist = "off"
perl.beep.beep_pv = "on"
perl.beep.beep_pv_blacklist = "off"
perl.beep.beep_pv_whitelist = "off"
perl.beep.beep_trigger_highlight = ""
perl.beep.beep_trigger_pv = ""
perl.beep.bell_always = ""
perl.beep.blacklist_nicks = ""
perl.beep.whitelist_channels = ""
perl.beep.whitelist_nicks = ""
perl.check_license = "off"
perl.colorize_lines.blacklist_buffers = ""
perl.colorize_lines.buffers = "all"
perl.colorize_lines.highlight = "on"
perl.colorize_lines.ignore_tags = "irc_ctcp"
perl.colorize_lines.lines = "on"
perl.colorize_lines.nicks = ""
perl.colorize_lines.own_lines = "on"
perl.colorize_lines.tags = "irc_privmsg"
perl.highmon.alignment = "channel"
perl.highmon.away_only = "off"
perl.highmon.bar_lines = "250"
perl.highmon.bar_scrolldown = "on"
perl.highmon.color_buf = "on"
perl.highmon.first_run = "true"
perl.highmon.hotlist_show = "off"
perl.highmon.logging = "off"
perl.highmon.merge_private = "off"
perl.highmon.nick_prefix = "<"
perl.highmon.nick_suffix = ">"
perl.highmon.output = "bar"
perl.highmon.short_names = "off"
perl.listsort.max_size = "500"
perl.sort_buffers.hook_signal = "off"
perl.sort_buffers.server_wide = "on"
perl.sort_buffers.sort_order = "default"
python.announce_url_title.announce_public = "off"
python.announce_url_title.buffers = "freenode.#testing,"
python.announce_url_title.buffers_notice = "freenode.#testing,"
python.announce_url_title.global = "off"
python.announce_url_title.global_prefix = "url"
python.announce_url_title.ignore_buffers = "grep,"
python.announce_url_title.prefix = ""
python.announce_url_title.reannounce_wait = "5"
python.announce_url_title.suffix = ""
python.announce_url_title.title_max_length = "80"
python.announce_url_title.url_ignore = ""
python.announce_url_title.user_agent = "WeeChat/%(version)s (http://www.weechat.org)"
python.apply_corrections.check_every = "5"
python.apply_corrections.data_timeout = "60"
python.apply_corrections.message_limit = "2"
python.apply_corrections.print_format = "[nick]: [corrected]"
python.apply_corrections.print_limit = "1"
python.arespond.muted = "off"
python.arespond.respondafterminutes = "10"
python.arespond.respondertext = "Sup. %s ain't here. This is his secretary, Jimbob. This message won't appear for another %d minutes."
python.bandwidth.device = "eth0"
python.bandwidth.format = "%N(↓%DV%DU/s ↑%UV%UU/s)"
python.bandwidth.refresh_rate = "5"
python.bandwidth.separator = " "
python.bitlbee_typing_notice.channel = "&bitlbee"
python.bitlbee_typing_notice.server = "bitlbee"
python.bitlbee_typing_notice.timeout = "4"
python.buffer_autoclose.age_limit = "30"
python.buffer_autoclose.ignore = ""
python.buffer_autoclose.interval = "1"
python.check_license = "off"
python.colorize_nicks.blacklist_channels = ""
python.colorize_nicks.blacklist_nicks = "so,root"
python.colorize_nicks.colorize_input = "on"
python.colorize_nicks.greedy_matching = "on"
python.colorize_nicks.ignore_tags = ""
python.colorize_nicks.min_nick_length = "2"
python.go.auto_jump = "off"
python.go.color_name = "black,cyan"
python.go.color_name_highlight = "red,cyan"
python.go.color_name_highlight_selected = "red,brown"
python.go.color_name_selected = "black,brown"
python.go.color_number = "yellow,magenta"
python.go.color_number_selected = "yellow,red"
python.go.message = "Go to: "
python.go.short_name = "off"
python.go.sort = "number,beginning"
python.go.use_core_instead_weechat = "off"
python.grep.clear_buffer = "off"
python.grep.default_tail_head = "10"
python.grep.go_to_buffer = "on"
python.grep.log_filter = ""
python.grep.max_lines = "4000"
python.grep.show_summary = "on"
python.grep.size_limit = "2048"
python.screen_away.away_suffix = ""
python.screen_away.command_on_attach = ""
python.screen_away.command_on_detach = ""
python.screen_away.ignore = ""
python.screen_away.ignore_relays = "off"
python.screen_away.interval = "5"
python.screen_away.message = "Detached / AFK"
python.screen_away.set_away = "on"
python.screen_away.time_format = "since %Y-%m-%d %H:%M:%S%z"
python.spell_correction.auto_pop_up_item = "on"
python.spell_correction.auto_replace = "on"
python.spell_correction.catch_input_completion = "off"
python.spell_correction.complete_near = "2"
python.spell_correction.eat_input_char = "on"
python.spell_correction.hide_single_dict = "on"
python.spell_correction.replace_mode = "on"
python.spell_correction.suggest_item = "${white}%S${default}"
python.title.short_name = "on"
python.title.title_priority = "2"
python.weather.city = ""
python.weather.interval = "10"
python.weather.language = "en"
python.weather.timeout = "10"
ruby.check_license = "off"
tcl.check_license = "off"

[desc]
lua.pastebuf.color_line = "Color for line content"
lua.pastebuf.color_line_number = "Color for line number"
lua.pastebuf.fetch_timeout = "Timeout for fetching URL (in milliseconds)"
lua.pastebuf.highlighter_timeout = "Timeout for syntax highlighter (in milliseconds)"
lua.pastebuf.open_unsupported_url = "Force open raw text of unsupported URL format"
lua.pastebuf.shell = "Location of your shell or just the shell name if it's already in $PATH"
lua.pastebuf.show_line_number = "Show line number"
lua.pastebuf.sticky_notes_retardness_level = "The retardness level of Sticky Notes API. Use level 0 if they somehow fixed their JSON string. Use level 1 to fix their awful JSON string first before decoding it. Use level 2 if level 1 failed fixing their JSON string. In level 2, we'll abandon their API and just fetch the raw paste. Default is 1."
lua.pastebuf.syntax_highlighter = "External command that will be used as syntax highlighter. $lang will be replaced by the name of syntax language"
lua.urlselect.buffer_name = "Type of name to use inside urlselect_buffer_name item. Valid values are "full", "normal", and "short""
lua.urlselect.buffer_name_color = "Color for buffer name"
lua.urlselect.buffer_number_color = "Color for buffer number"
lua.urlselect.help_color = "Color for help text"
lua.urlselect.highlight_color = "Nickname color for highlighted message"
lua.urlselect.index_color = "Color for URL index"
lua.urlselect.key_color = "Color for list of keys"
lua.urlselect.message_color = "Color for message text"
lua.urlselect.nick_color = "Color for nickname. Leave empty to use Weechat's nick color"
lua.urlselect.scan_merged_buffers = "Scan URLs from buffers that are merged with the current one"
lua.urlselect.search_prompt_color = "Color for search prompt"
lua.urlselect.search_scope = "Default search scope. Valid values are: url, msg, nick or nick+msg"
lua.urlselect.search_scope_color = "Color for current search scope"
lua.urlselect.status_color = "Color for status notification"
lua.urlselect.status_timeout = "Timeout for displaying status notification (in milliseconds)"
lua.urlselect.tags = "Comma separated list of tags. If not empty, script will only scan URLs from messages with any of these tags"
lua.urlselect.time_color = "Color for time"
lua.urlselect.time_format = "Format of time"
lua.urlselect.title_color = "Color for bar title"
lua.urlselect.url_color = "Color for URL"
lua.urlselect.use_simple_matching = "Use simple pattern matching when scanning for URLs"
perl.beep.beep_command_dcc = "command for beep on dcc, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_highlight = "command for beep on highlight, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_pv = "command for beep on private message, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_timeout = "timeout for command run (in milliseconds, 0 = never kill (not recommended)) (default: "30000")"
perl.beep.beep_dcc = "beep on dcc (default: "on")"
perl.beep.beep_highlight = "beep on highlight (default: "on")"
perl.beep.beep_highlight_blacklist = "turn blacklist for highlights on or off (default: "off")"
perl.beep.beep_highlight_whitelist = "turn whitelist for highlights on or off (default: "off")"
perl.beep.beep_pv = "beep on private message (default: "on")"
perl.beep.beep_pv_blacklist = "turn blacklist for private messages on or off (default: "off")"
perl.beep.beep_pv_whitelist = "turn whitelist for private messages on or off (default: "off")"
perl.beep.beep_trigger_highlight = "word that will trigger execution of beep_command_highlight (if empty, anything will trigger) (default: "")"
perl.beep.beep_trigger_pv = "word that will trigger execution of beep_command_pv (it empty, anything will trigger) (default: "")"
perl.beep.bell_always = "use $bell on private messages and/or highlights regardless of trigger and whitelist settings (example: "pv,highlight") (default: "")"
perl.beep.blacklist_nicks = "comma-separated list of "server.nick": if not empty, these nicks will not be able to trigger execution of commands. Cannot be used in conjuction with whitelist (example: "freenode.nick1,freenode.nick2") (default: "")"
perl.beep.whitelist_channels = "comma-separated list of "server.#channel": if not empty, only these channels will trigger execution of commands (example: "freenode.#weechat,freenode.#channel2") (default: "")"
perl.beep.whitelist_nicks = "comma-separated list of "server.nick": if not empty, only these nicks will trigger execution of commands (example: "freenode.nick1,freenode.nick2") (default: "")"
perl.colorize_lines.blacklist_buffers = "comma-separated list of channels to be ignored (e.g. freenode.#weechat,*.#python)"
perl.colorize_lines.buffers = "buffer type affected by the script (all/channel/query, default: all)"
perl.colorize_lines.highlight = "apply highlight color to the highlighted lines (off/on/nicks). the latter will limit highlighting to nicknames in option 'nicks'"
perl.colorize_lines.ignore_tags = "Comma-separated list of tags to ignore (see /debug tags)"
perl.colorize_lines.lines = "apply nickname color to the lines (off/on/nicks). the latter will limit highlighting to nicknames in option 'nicks'"
perl.colorize_lines.nicks = "comma-separater list of nicks (e.g. freenode.cat,*.dog) OR file name starting with '/' (e.g. /file.txt). in the latter case, nicknames will get loaded from that file inside weechat folder (e.g. from ~/.weechat/file.txt). nicknames in file are newline-separated (e.g. freenode.dog\n*.cat)"
perl.colorize_lines.own_lines = "apply nickname color to own lines (off/on/only). the latter turns off all other kinds of coloring altogether"
perl.colorize_lines.tags = "Comma-separated list of tags to accept (see /debug tags)"
perl.listsort.max_size = "maximum size of /list output in kilobytes to be handled"
perl.sort_buffers.hook_signal = "if "on" buffers will be sort every time a buffer was opened. Keep in mind that sorting buffers will delete read_marker. (default: off)"
perl.sort_buffers.server_wide = "buffers will be sorted server wide. This option takes only effect when option "hook_signal" is on. (default: on)"
perl.sort_buffers.sort_order = "sort of buffers "default" or "reverse" order. This option takes only effect when option "hook_signal" is on. (default: default)"
python.apply_corrections.check_every = "Interval between each check for expired messages."
python.apply_corrections.data_timeout = "Time before a message is expired."
python.apply_corrections.message_limit = "Number of messages to store per nick."
python.apply_corrections.print_format = "Format string for the printed corrections."
python.apply_corrections.print_limit = "Maximum number of lines to correct."
python.bandwidth.device = "Network interface(s) to monitor, in order, separated by ';'"
python.bandwidth.format = "Output formatting: %N = network interface, %DV = downstream value, %DU = downstream units (K or M), %UV = upstream value, %UU = upstream units (K or M).  Note: default setting uses UTF-8"
python.bandwidth.refresh_rate = "Refresh rate in seconds"
python.bandwidth.separator = "String displayed between output for multiple devices"
python.go.auto_jump = "automatically jump to buffer when it is uniquely selected (default: "off")"
python.go.color_name = "color for buffer name (not selected) (default: "black,cyan")"
python.go.color_name_highlight = "color for highlight in buffer name (not selected) (default: "red,cyan")"
python.go.color_name_highlight_selected = "color for highlight in a selected buffer name (default: "red,brown")"
python.go.color_name_selected = "color for a selected buffer name (default: "black,brown")"
python.go.color_number = "color for buffer number (not selected) (default: "yellow,magenta")"
python.go.color_number_selected = "color for selected buffer number (default: "yellow,red")"
python.go.message = "message to display before list of buffers (default: "Go to: ")"
python.go.short_name = "display and search in short names instead of buffer name (default: "off")"
python.go.sort = "comma-separated list of keys to sort buffers (the order is important, sorts are performed in the given order): name = sort by name (or short name),  (default: "number,beginning")"
python.go.use_core_instead_weechat = "use name "core" instead of "weechat" for core buffer (default: "off")"
python.screen_away.away_suffix = "What to append to your nick when you're away."
python.screen_away.command_on_attach = "Commands to execute on attach, separated by semicolon"
python.screen_away.command_on_detach = "Commands to execute on detach, separated by semicolon"
python.screen_away.ignore = "Comma-separated list of servers to ignore."
python.screen_away.ignore_relays = "Only check screen status and ignore relay interfaces"
python.screen_away.interval = "How often in seconds to check screen status"
python.screen_away.message = "Away message"
python.screen_away.set_away = "Set user as away."
python.screen_away.time_format = "time format append to away message"
python.spell_correction.auto_pop_up_item = "automatic pop-up suggestion item on a misspelled word (default: "off")"
python.spell_correction.auto_replace = "replaces misspelled word with selected suggestion, automatically. If you use "off" you will have to bind command "/spell_correction replace" to a key (default: "on")"
python.spell_correction.catch_input_completion = "will catch the input_complete commands [TAB-key] (default: "on")"
python.spell_correction.complete_near = "show suggestions item only if you are n-chars near the misspelled word (0 = off). Using 'replace_mode' cursor has to be n-chars near misspelled word to cycle through suggestions. (default: "0")"
python.spell_correction.eat_input_char = "will eat the next char you type, after replacing a misspelled word (default: "on")"
python.spell_correction.hide_single_dict = "will hide dict in item if you have a single dict for buffer only (default: "on")"
python.spell_correction.replace_mode = "misspelled word will be replaced directly by suggestions. Use option 'complete_near' to specify range and item 'spell_suggest' to show possible suggestions. (default: "off")"
python.spell_correction.suggest_item = "item format (%S = suggestion, %D = dict). Colors are allowed with format "${color}". note: since WeeChat 0.4.2 content is evaluated, see /help eval. (default: "${white}%S${default}")"
